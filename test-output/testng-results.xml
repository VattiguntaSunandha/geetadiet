<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="93" passed="59" failed="34" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-07-22T15:48:06 EDT" name="Default suite" finished-at="2022-07-22T15:48:42 EDT" duration-ms="35556">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test started-at="2022-07-22T15:48:06 EDT" name="Default test" finished-at="2022-07-22T15:48:42 EDT" duration-ms="35556">
      <class name="runner.MasterTestRunner">
        <test-method is-config="true" signature="setUpClass(org.testng.ITestContext)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:06 EDT" name="setUpClass" finished-at="2022-07-22T15:48:09 EDT" duration-ms="3093" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@7e4d2884]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:09 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:16 EDT" duration-ms="6669" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able get All Morbidity records."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:16 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:16 EDT" duration-ms="87" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets UnAuthorized Access."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:16 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:16 EDT" duration-ms="274" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Not Found error(invalid url)."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:17 EDT" duration-ms="119" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Internal Server error."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [500] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [500] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidAPIStepDef.user_will_check_for_ok(MorbidAPIStepDef.java:57)
at ?.User will check for 500  Ok.(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/GetMorbidityFeatures/MorbidityAPI.feature:32)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:17 EDT" duration-ms="209" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able get all Morbidity records with given id."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity ID API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:17 EDT" duration-ms="61" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets UnAuthorized Access."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity ID API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:17 EDT" duration-ms="69" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Not Found error(invalid endpoints)."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity ID API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:17 EDT" duration-ms="120" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Internal Server error."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity ID API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [500] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [500] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidAPI_MorbidityIdStepDef.user_checks_for_ok_and(MorbidAPI_MorbidityIdStepDef.java:53)
at ?.User checks for 500  Ok and(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/GetMorbidityFeatures/Morbidity_MorbidityId.feature:34)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:17 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="593" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able get all Morbidity records with given Name."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity Name API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="79" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets UnAuthorized Access."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity Name API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="104" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Not Found error(invalid endpoints)."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity Name API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="80" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user gets Internal Server error."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Get Request for Morbidity Name API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [500] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [500] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidAPI_MorbidityNameStepDef.user_will_checks_for_ok_and(MorbidAPI_MorbidityNameStepDef.java:52)
at ?.User will checks for 500  Ok and(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/GetMorbidityFeatures/Morbidity_MorbidityNameAPI.feature:34)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="105" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we are getting records of Users By Contact with Valid ContactNo"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Contact]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="125" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By Contact with Invalid ContactNo"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Contact]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="119" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By Contact with Invalid ContactNo"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Contact]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:18 EDT" duration-ms="79" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating negative Scenario if we are getting record of Users By ContactNo With Invalid EndPoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Contact]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:18 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="98" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we are getting records of Users By Dietician ID with Valid DieticianID"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Dietician Id]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="91" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By DieticianID with Invalid DieticianID"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Dietician Id]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="101" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By DieticianID with Invalid DieticianID"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Dietician Id]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="77" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating negative Scenario if we are getting record of Users By DieticianID With Invalid EndPoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By Dietician Id]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="69" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we are getting records of Users By Email with Valid Email Id"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validating and Testing Get Request for UserAPI By EmailId]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="88" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By Email with Invalid EmailId"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validating and Testing Get Request for UserAPI By EmailId]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="90" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By Email with Invalid EmailId"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validating and Testing Get Request for UserAPI By EmailId]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="72" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating negative Scenario if we are getting record of Users By Email With Invalid EndPoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validating and Testing Get Request for UserAPI By EmailId]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="74" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we are getting records of Users By First Name with Valid First Name"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="112" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By First Name with Invalid First Name"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:19 EDT" duration-ms="86" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating if we are getting record of Users By First Name with Invalid First Name"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:19 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="56" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating negative Scenario if we are getting record of Users By First Name With Invalid EndPoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="55" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Validating Negative case if we are getting record of Users By First Name With Invalid Authorisation"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="39" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Users By First Name When servers no running"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for UserAPI By First Name]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[basePath cannot be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: basePath cannot be null
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:60)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:86)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.common.assertion.AssertParameter.notNull(AssertParameter.groovy:26)
at io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallStatic(CallSiteArray.java:54)
at io.restassured.internal.common.assertion.AssertParameter$notNull.callStatic(Unknown Source)
at io.restassured.internal.RequestSpecificationImpl.<init>(RequestSpecificationImpl.groovy:140)
at io.restassured.RestAssured.createTestSpecification(RestAssured.java:1453)
at io.restassured.RestAssured.given(RestAssured.java:654)
at stepdefinitions.GetUserFirstNameStepDefs.for_get_request_the_authorization_is_set_to_basic_auth_with_servers_not_running(GetUserFirstNameStepDefs.java:132)
at ?.For Get request, the Authorization is set to Basic auth with servers not running(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/GetUsersAPIFeatures/GetUserFirstName.feature:41)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="155" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at MorbidityAPI.DeleteMorbidity.status_ok_is_displayed_with_morbidity_name_morbidity_test_id_and_message_as_is_displayed(DeleteMorbidity.java:51)
at ?.Status 200 OK is displayed with Morbidity Name, MorbidityTestId and Message as "Successfully Deleted." is displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/DeleteMorbidity.feature:8)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="91" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at MorbidityAPI.DeleteMorbidity.status_ok_is_displayed_with_morbidity_name_morbidity_test_id_and_message_as_is_displayed(DeleteMorbidity.java:51)
at ?.Status 200 OK is displayed with Morbidity Name, MorbidityTestId and Message as "Successfully Deleted." is displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/DeleteMorbidity.feature:8)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="97" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Successfully Deleted.] but found [Already Deleted OR wrong MorbidityName ,MorbidityTestId.]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at MorbidityAPI.DeleteMorbidity.status_ok_is_displayed_with_morbidity_name_morbidity_test_id_and_message_as_is_displayed(DeleteMorbidity.java:51)
at ?.Status 200 OK is displayed with Morbidity Name, MorbidityTestId and Message as "Successfully Deleted." is displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/DeleteMorbidity.feature:8)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="101" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete non existing record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at MorbidityAPI.DeleteMorbidity.status_not_found_is_displayed_with_a_message_is_displayed(DeleteMorbidity.java:74)
at ?.Status 404 Not Found is displayed with a Message "Already Deleted OR wrong MorbidityName ,MorbidityTestId." is displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/DeleteMorbidity.feature:20)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="92" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete record successfully with incorrect url"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [405] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [405] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at MorbidityAPI.DeleteMorbidity.status_method_not_allowed_will_be_displayed_with_a_message(DeleteMorbidity.java:96)
at ?.Status 405 Method Not Allowed will be displayed with a message "The method is not allowed for the requested URL."(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/DeleteMorbidity.feature:30)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="42" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to delete record successfully with invalid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Delete Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:20 EDT" duration-ms="61" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able get All Morbidity records."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for Morbidity API with valid authorization]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:20 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:26 EDT" duration-ms="5527" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if user is able to add a new record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Post Request for Morbidity API with authorization]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:26 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:27 EDT" duration-ms="1362" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to add a existing record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Post Request for Morbidity API with authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [null] but found [5VA_5VB]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [null] but found [5VA_5VB]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotSame(Assert.java:1033)
at org.testng.Assert.assertNull(Assert.java:965)
at org.testng.Assert.assertNull(Assert.java:953)
at MorbidityAPI.PostMorbidityAPI.status_ok_should_display_with_a_message(PostMorbidityAPI.java:127)
at ?.Status 200 Ok should display with a Message "Error Occured"(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/PostMorbidity.feature:16)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:27 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="890" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to add a new record successfully"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Post Request for Morbidity API with authorization]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at MorbidityAPI.PostMorbidityAPI.status_bad_request_should_display_with_a_message_missing_items_or_invalid_entry_check_on_names(PostMorbidityAPI.java:160)
at ?.Status 400 Bad Request should display with a Message Missing Items OR Invalid Entry.Check on "Missing Field" Names(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/MorbidityFeatures/PostMorbidity.feature:22)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to add a new record successfully with out request body data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Post Request for Morbidity API with authorization]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="33" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if user is able to add a new record successfully with invalid authorization"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Post Request for Morbidity API with authorization]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="118" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able put (update) Morbidity records."]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Put Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="43" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able put (update) Morbidity records"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Put Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidPutAPIStepDef.user_will_check_for(MorbidPutAPIStepDef.java:63)
at ?.User will check for 404  "autoTestMarkerRefNo"  "autoTestTestUnitNo"(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/PutMorbidityFeatures/PutMorbidityAPI.feature:21)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="51" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able put (update) Morbidity records"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Put Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidPutAPIStepDef.user_will_check_for(MorbidPutAPIStepDef.java:63)
at ?.User will check for 404  "autoTestMarkerRefnoo"  "autoTestTestUnituptnoo"(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/PutMorbidityFeatures/PutMorbidityAPI.feature:21)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="53" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user is able put (update) Morbidity records"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Verify Put Request for Morbidity API.]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [200]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [200]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.MorbidPutAPIStepDef.user_will_check_for(MorbidPutAPIStepDef.java:63)
at ?.User will check for 404  "autoTestMarkerRefN"  "autoTestTestUnituptN"(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/PutMorbidityFeatures/PutMorbidityAPI.feature:21)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:28 EDT" duration-ms="61" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of with RecipeIngredient"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeIngredient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:28 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="42" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of with RecipeIngredient with invalid request query string"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeIngredient]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at RecipesAPI.RecipeAPIGetRecipeIngredientSteps.status_validation_error_will_be_seen(RecipeAPIGetRecipeIngredientSteps.java:65)
at ?.Status 400 Validation Error will be seen(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/RecipeAPIFeatures/RecipeAPIGetIngredient.feature:15)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="30" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeIngredient with Unauthorised Acces"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeIngredient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="52" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeNutrient with invalid endpoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeIngredient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="83" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Non-Vegetarian with valid"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Non-Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="69" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Non-Vegetarian with invalid request query string"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Non-Vegetarian]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at RecipesAPI.RecipeAPIGetNonVegetarianSteps.status_Validation_Error_be_displayed(RecipeAPIGetNonVegetarianSteps.java:68)
at ?.Status 400 Validation Error be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/RecipeAPIFeatures/RecipeAPIGetNonVegetarian.feature:15)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="49" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Non-Vegetarian with Unauthorised Access"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Non-Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="37" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Non-Vegetarian with invalid endpoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Non-Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="60" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of with RecipeNutrient"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeNutrient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="44" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeNutrient with invalid request query string"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeNutrient]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at RecipesAPI.RecipeAPIGetNutrientSteps.status_validation_error(RecipeAPIGetNutrientSteps.java:66)
at ?.Status 400 Validation Error(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/RecipeAPIFeatures/RecipeAPIGetNutrient.feature:14)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="42" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeNutrient with Unauthorised Access"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeNutrient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="34" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeNutrient with invalid endpoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeNutrient]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="50" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of with RecipeType"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeType]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="40" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeType with invalid query"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeType]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at RecipesAPI.RecipeAPIGetRecipeTypeSteps.status_validation_error_will_be_displays(RecipeAPIGetRecipeTypeSteps.java:69)
at ?.Status 400 Validation Error will be displays(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/RecipeAPIFeatures/RecipeAPIGetRecipeType.feature:15)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="29" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeType with Unauthorised Acces"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeType]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="43" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of RecipeType with invalid endpoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with RecipeType]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="75" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Vegetarian"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="50" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Vegetarian with invalid query"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Vegetarian]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [400] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [400] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at RecipesAPI.RecipeAPIGetVegetarianSteps.status_validation_error_will_be_shown(RecipeAPIGetVegetarianSteps.java:68)
at ?.Status 400 Validation Error will be shown(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/RecipeAPIFeatures/RecipeAPIGetVegetarian.feature:15)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="31" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Vegetarian with default authorization"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:29 EDT" duration-ms="48" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if we are getting record of Vegetarian with invalid endpoint"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with Vegetarian]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:29 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="58" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Checking if We are getting all the records"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test Get Request for DieticianAPI with no parameters]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="46" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that user record gets deleted"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate DeleteUser Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="io.restassured.path.json.exception.JsonPathException">
            <message>
              <![CDATA[Failed to parse the JSON document]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.restassured.path.json.exception.JsonPathException: Failed to parse the JSON document
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1002)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.user_sends_delete_user_request_with_existing_dietician_and_user_id(DeleteUser.java:33)
at ?.User sends delete user request with existing dietician and user id "Users/DieticianId=DT002&UserId=PT0006"(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/DeleteUser.feature:6)
Caused by: groovy.json.JsonException: Lexing failed on line: 1, column: 1, while reading '<', no possible valid JSON value or punctuation could be recognized.
at groovy.json.JsonLexer.nextToken(JsonLexer.java:86)
at groovy.json.JsonLexer$nextToken.call(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parse(ConfigurableJsonSlurper.groovy:97)
at io.restassured.internal.path.json.ConfigurableJsonSlurper$parse.callCurrent(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parseText(ConfigurableJsonSlurper.groovy:83)
at io.restassured.path.json.JsonPath$4$1.method(JsonPath.java:965)
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1000)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.user_sends_delete_user_request_with_existing_dietician_and_user_id(DeleteUser.java:33)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.cucumber.java.Invoker.doInvoke(Invoker.java:66)
at io.cucumber.java.Invoker.invoke(Invoker.java:24)
at io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)
at io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)
at io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)
at io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)
at io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)
at io.cucumber.core.runner.TestStep.executeStep(TestStep.java:86)
at io.cucumber.core.runner.TestStep.run(TestStep.java:57)
at io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)
at io.cucumber.core.runner.TestCase.run(TestCase.java:95)
at io.cucumber.core.runner.Runner.runPickle(Runner.java:75)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:132)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$3(CucumberExecutionContext.java:146)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:146)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at jdk.internal.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- io.restassured.path.json.exception.JsonPathException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="47" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if user record gets deleted when dietician and user id are incorrect"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate DeleteUser Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="io.restassured.path.json.exception.JsonPathException">
            <message>
              <![CDATA[Failed to parse the JSON document]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.restassured.path.json.exception.JsonPathException: Failed to parse the JSON document
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1002)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.status_user_not_found_should_be_displayed(DeleteUser.java:73)
at ?.Status 404 user not found should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/DeleteUser.feature:16)
Caused by: groovy.json.JsonException: Lexing failed on line: 1, column: 1, while reading '<', no possible valid JSON value or punctuation could be recognized.
at groovy.json.JsonLexer.nextToken(JsonLexer.java:86)
at groovy.json.JsonLexer$nextToken.call(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parse(ConfigurableJsonSlurper.groovy:97)
at io.restassured.internal.path.json.ConfigurableJsonSlurper$parse.callCurrent(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parseText(ConfigurableJsonSlurper.groovy:83)
at io.restassured.path.json.JsonPath$4$1.method(JsonPath.java:965)
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1000)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.status_user_not_found_should_be_displayed(DeleteUser.java:73)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.cucumber.java.Invoker.doInvoke(Invoker.java:66)
at io.cucumber.java.Invoker.invoke(Invoker.java:24)
at io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)
at io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)
at io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)
at io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)
at io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)
at io.cucumber.core.runner.TestStep.executeStep(TestStep.java:86)
at io.cucumber.core.runner.TestStep.run(TestStep.java:57)
at io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)
at io.cucumber.core.runner.TestCase.run(TestCase.java:95)
at io.cucumber.core.runner.Runner.runPickle(Runner.java:75)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:132)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$3(CucumberExecutionContext.java:146)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:146)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at jdk.internal.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- io.restassured.path.json.exception.JsonPathException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="37" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if user record gets deleted when dietician and user id are incorrect"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate DeleteUser Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="io.restassured.path.json.exception.JsonPathException">
            <message>
              <![CDATA[Failed to parse the JSON document]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.restassured.path.json.exception.JsonPathException: Failed to parse the JSON document
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1002)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.status_user_not_found_should_be_displayed(DeleteUser.java:73)
at ?.Status 404 user not found should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/DeleteUser.feature:16)
Caused by: groovy.json.JsonException: Lexing failed on line: 1, column: 1, while reading '<', no possible valid JSON value or punctuation could be recognized.
at groovy.json.JsonLexer.nextToken(JsonLexer.java:86)
at groovy.json.JsonLexer$nextToken.call(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parse(ConfigurableJsonSlurper.groovy:97)
at io.restassured.internal.path.json.ConfigurableJsonSlurper$parse.callCurrent(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parseText(ConfigurableJsonSlurper.groovy:83)
at io.restassured.path.json.JsonPath$4$1.method(JsonPath.java:965)
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1000)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.get(JsonPath.java:202)
at stepdefinitions.DeleteUser.status_user_not_found_should_be_displayed(DeleteUser.java:73)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.cucumber.java.Invoker.doInvoke(Invoker.java:66)
at io.cucumber.java.Invoker.invoke(Invoker.java:24)
at io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)
at io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)
at io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)
at io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)
at io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)
at io.cucumber.core.runner.TestStep.executeStep(TestStep.java:86)
at io.cucumber.core.runner.TestStep.run(TestStep.java:57)
at io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)
at io.cucumber.core.runner.TestCase.run(TestCase.java:95)
at io.cucumber.core.runner.Runner.runPickle(Runner.java:75)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:132)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$3(CucumberExecutionContext.java:146)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:146)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at jdk.internal.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- io.restassured.path.json.exception.JsonPathException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="40" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if user record gets deleted without authorization"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate DeleteUser Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="io.restassured.path.json.exception.JsonPathException">
            <message>
              <![CDATA[Failed to parse the JSON document]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.restassured.path.json.exception.JsonPathException: Failed to parse the JSON document
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1002)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.toJsonString(JsonPath.java:1064)
at io.restassured.path.json.JsonPath.prettify(JsonPath.java:685)
at io.restassured.path.json.JsonPath.prettyPrint(JsonPath.java:700)
at stepdefinitions.DeleteUser.status_unauthorized_should_be_displayed(DeleteUser.java:92)
at ?.Status 401 Unauthorized should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/DeleteUser.feature:27)
Caused by: groovy.json.JsonException: Lexing failed on line: 1, column: 1, while reading '<', no possible valid JSON value or punctuation could be recognized.
at groovy.json.JsonLexer.nextToken(JsonLexer.java:86)
at groovy.json.JsonLexer$nextToken.call(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parse(ConfigurableJsonSlurper.groovy:97)
at io.restassured.internal.path.json.ConfigurableJsonSlurper$parse.callCurrent(Unknown Source)
at io.restassured.internal.path.json.ConfigurableJsonSlurper.parseText(ConfigurableJsonSlurper.groovy:83)
at io.restassured.path.json.JsonPath$4$1.method(JsonPath.java:965)
at io.restassured.path.json.JsonPath$ExceptionCatcher.invoke(JsonPath.java:1000)
at io.restassured.path.json.JsonPath$4.doParseWith(JsonPath.java:967)
at io.restassured.path.json.JsonPath$JsonParser.parseWith(JsonPath.java:1047)
at io.restassured.path.json.JsonPath.toJsonString(JsonPath.java:1064)
at io.restassured.path.json.JsonPath.prettify(JsonPath.java:685)
at io.restassured.path.json.JsonPath.prettyPrint(JsonPath.java:700)
at stepdefinitions.DeleteUser.status_unauthorized_should_be_displayed(DeleteUser.java:92)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at io.cucumber.java.Invoker.doInvoke(Invoker.java:66)
at io.cucumber.java.Invoker.invoke(Invoker.java:24)
at io.cucumber.java.AbstractGlueDefinition.invokeMethod(AbstractGlueDefinition.java:47)
at io.cucumber.java.JavaStepDefinition.execute(JavaStepDefinition.java:29)
at io.cucumber.core.runner.CoreStepDefinition.execute(CoreStepDefinition.java:66)
at io.cucumber.core.runner.PickleStepDefinitionMatch.runStep(PickleStepDefinitionMatch.java:63)
at io.cucumber.core.runner.ExecutionMode$1.execute(ExecutionMode.java:10)
at io.cucumber.core.runner.TestStep.executeStep(TestStep.java:86)
at io.cucumber.core.runner.TestStep.run(TestStep.java:57)
at io.cucumber.core.runner.PickleStepTestStep.run(PickleStepTestStep.java:51)
at io.cucumber.core.runner.TestCase.run(TestCase.java:95)
at io.cucumber.core.runner.Runner.runPickle(Runner.java:75)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$1(TestNGCucumberRunner.java:132)
at io.cucumber.core.runtime.CucumberExecutionContext.lambda$runTestCase$3(CucumberExecutionContext.java:146)
at io.cucumber.core.runtime.RethrowingThrowableCollector.executeAndThrow(RethrowingThrowableCollector.java:23)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:146)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:129)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:35)
at jdk.internal.reflect.GeneratedMethodAccessor195.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- io.restassured.path.json.exception.JsonPathException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="76" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is able to get list of all users"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test GET request for Users API]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="60" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that we are getting records of User by User Type - Dietician"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Dietician]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at stepdefinitions.GetUser_Dietician.status_should_be_displayed_with_user_records_of_type_dietician(GetUser_Dietician.java:64)
at ?.Status 200 should be displayed with user records of type Dietician(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/GetUser_Dietician.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="72" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that we are getting records of User by User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="39" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get user records in case of invalid User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get user records in case of invalid User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get user records in case of invalid User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="43" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get user records in case of invalid User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="44" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get user records in case of invalid User Type"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="44" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we are getting records of User Type with no authorization"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="42" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get records of User by User Type with invalid credentials"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [404] but found [401]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [404] but found [401]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at org.testng.Assert.assertEquals(Assert.java:917)
at stepdefinitions.GetUser_UserType.status_unauthorized_access_should_be_displayed(GetUser_UserType.java:125)
at ?.Status 401 Unauthorized access should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/GetUser_UserType.feature:37)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="55" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get records of User Type when server is down"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:30 EDT" duration-ms="35" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if we can get records of User Type when server is down"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Get User Request for Dietician Users API for User Type - Patient / Dietician]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:30 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:32 EDT" duration-ms="2122" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is able to create a new user record"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path Message doesn't match.
Expected: Successfully Created.
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path Message doesn't match.
Expected: Successfully Created.
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:263)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:505)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:687)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:50)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:263)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallCurrent(CallSiteArray.java:50)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:171)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:212)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:110)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at stepdefinitions.PostUsers.user_should_be_displayed_success_status_code_with_message_successfully_created_with_automatically_generated_userid(PostUsers.java:119)
at ?.User should be displayed success status code 200 with message Successfully Created. with automatically generated userid(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/POSTUsers.feature:10)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:32 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:33 EDT" duration-ms="837" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is able to create a new user record with either existing firstname or existing contact or existing email"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path Message doesn't match.
Expected: Successfully Created.
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path Message doesn't match.
Expected: Successfully Created.
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:505)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:687)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at jdk.internal.reflect.GeneratedMethodAccessor318.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:263)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:110)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at stepdefinitions.PostUsers.user_should_be_displayed_success_status_code_with_message_successfully_created_with_automatically_generated_userid(PostUsers.java:119)
at ?.User should be displayed success status code 200 with message Successfully Created. with automatically generated userid(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/POSTUsers.feature:16)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:33 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:35 EDT" duration-ms="1430" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is unable to create a new user record with existing firstname, contact and email"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path Message doesn't match.
Expected: User detail already Exists. Check on [ Firstname, Contact , Email ]
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path Message doesn't match.
Expected: User detail already Exists. Check on [ Firstname, Contact , Email ]
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:505)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:687)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at jdk.internal.reflect.GeneratedMethodAccessor318.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:263)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:110)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at stepdefinitions.PostUsers.user_should_be_displayed_success_status_code_with_message_user_detail_already_exists_check_on_firstname_contact_email(PostUsers.java:218)
at ?.User should be displayed success status code 200 with message User detail already Exists. Check on [ Firstname, Contact , Email ](file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/POSTUsers.feature:22)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:35 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:35 EDT" duration-ms="561" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is able to create a new user record with missing mandatory field"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
JSON path Message doesn't match.
Expected: Missing Items OR Invalid Entry. Check on ['Allergy']
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
JSON path Message doesn't match.
Expected: Missing Items OR Invalid Entry. Check on ['Allergy']
  Actual: Missing Items OR Invalid Entry.Check on ['Extra attributes mentioned.']

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:505)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:687)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at jdk.internal.reflect.GeneratedMethodAccessor318.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:263)
at io.restassured.specification.ResponseSpecification$body$1.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:110)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:244)
at stepdefinitions.PostUsers.user_should_be_displayed_success_status_code_with_message_missing_items_or_invalid_entry_check_on_fieldname(PostUsers.java:271)
at ?.User should be displayed success status code 200 with message Missing Items OR Invalid Entry. Check on fieldname(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/POSTUsers.feature:28)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:35 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:35 EDT" duration-ms="35" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is able to create a new user record with empty request body"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:35 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:36 EDT" duration-ms="485" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["User is not able to create a new user record when UserType is other than Dietician/Patient"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate and Test POST request for Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Expected status code <400> but was <200>.
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Expected status code <400> but was <200>.

at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:73)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrapNoCoerce.callConstructor(ConstructorSite.java:108)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:277)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:505)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:687)
at io.restassured.internal.ResponseSpecificationImpl.this$2$validateResponseIfRequired(ResponseSpecificationImpl.groovy)
at jdk.internal.reflect.GeneratedMethodAccessor318.invoke(Unknown Source)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:198)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:62)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:185)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:128)
at io.restassured.specification.ResponseSpecification$statusCode$0.callCurrent(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.statusCode(ResponseSpecificationImpl.groovy:136)
at io.restassured.internal.ValidatableResponseOptionsImpl.statusCode(ValidatableResponseOptionsImpl.java:89)
at stepdefinitions.PostUsers.user_should_be_displayed_validation_error_message_user_type_should_be_dietician_patient(PostUsers.java:339)
at ?.User should be displayed 400 validation error message UserType should be Dietician/Patient(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/POSTUsers.feature:40)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:36 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:37 EDT" duration-ms="881" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify that existing user record is updated"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Put User Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['void org.testng.Assert.assertEquals(java.lang.Integer, int)']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'void org.testng.Assert.assertEquals(java.lang.Integer, int)'
at stepdefinitions.PutUsers.status_code_record_updated_should_be_displayed(PutUsers.java:82)
at ?.Status code 200 record updated should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/PutUsers.feature:7)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:37 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:37 EDT" duration-ms="117" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if existing record gets updated with same values"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Put User Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['void org.testng.Assert.assertEquals(java.lang.Integer, int)']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'void org.testng.Assert.assertEquals(java.lang.Integer, int)'
at stepdefinitions.PutUsers.status_code_for_successful_update_should_be_displayed(PutUsers.java:127)
at ?.status code 200 for successful update should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/PutUsers.feature:13)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:37 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:37 EDT" duration-ms="110" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if existing user record can be updated with null values or empty fields"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Put User Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['void org.testng.Assert.assertEquals(java.lang.Integer, int)']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'void org.testng.Assert.assertEquals(java.lang.Integer, int)'
at stepdefinitions.PutUsers.status_code_bad_request_should_be_displayed(PutUsers.java:169)
at ?.Status code 400 bad request should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/PutUsers.feature:19)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method signature="runScenario(io.cucumber.testng.PickleWrapper,io.cucumber.testng.FeatureWrapper)[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:37 EDT" name="runScenario" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-07-22T15:48:37 EDT" duration-ms="93" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA["Verify if user record gets updated in case of incorrect or non existent id"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Validate Put User Request for Dietician Users API]"]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.NoSuchMethodError">
            <message>
              <![CDATA['void org.testng.Assert.assertEquals(java.lang.Integer, int)']]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.NoSuchMethodError: 'void org.testng.Assert.assertEquals(java.lang.Integer, int)'
at stepdefinitions.PutUsers.status_user_id_not_found_should_be_displayed(PutUsers.java:194)
at ?.Status 400 user id not found should be displayed(file:///C:/Users/geeta/git/DieticianAPI-Hackathon/src/test/resources/features/Users/PutUsers.feature:25)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NoSuchMethodError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method is-config="true" signature="tearDownClass()[pri:0, instance:runner.MasterTestRunner@43effd89]" started-at="2022-07-22T15:48:37 EDT" name="tearDownClass" finished-at="2022-07-22T15:48:42 EDT" duration-ms="4617" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- runner.MasterTestRunner -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
